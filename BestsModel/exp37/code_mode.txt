import torch
import torch.nn as nn
import torch.nn.functional as F

class Encoder(nn.Module):
    def __init__(self, in_channels):
        super(Encoder, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, 64, kernel_size=3, padding=1)
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.conv3 = nn.Conv2d(128, 256, kernel_size=3, padding=1)
        self.dropout3 = nn.Dropout2d(p=0.5)
        self.conv4 = nn.Conv2d(256, 512, kernel_size=3, padding=1)
        self.dropout4 = nn.Dropout2d(p=0.5)
        self.pool = nn.MaxPool2d(2, 2)

    def forward(self, x):
        x1 = self.pool(F.relu(self.dropout1(self.conv1(x))))
        x2 = self.pool(F.relu(self.dropout2(self.conv2(x1))))
        x3 = self.pool(F.relu(self.dropout3(self.conv3(x2))))
        x4 = self.pool(F.relu(self.dropout4(self.conv4(x3))))
        return x4, (x1, x2, x3)

class Decoder(nn.Module):
    def __init__(self, out_channels):
        super(Decoder, self).__init__()
        self.upconv1 = nn.ConvTranspose2d(512, 256, kernel_size=2, stride=2)
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.upconv2 = nn.ConvTranspose2d(256, 128, kernel_size=2, stride=2)
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.upconv3 = nn.ConvTranspose2d(128, 64, kernel_size=2, stride=2)
        self.dropout3 = nn.Dropout2d(p=0.5)
        self.upconv4 = nn.ConvTranspose2d(64, out_channels, kernel_size=2, stride=2)
        self.dropout4 = nn.Dropout2d(p=0.5)
        self.conv1 = nn.Conv2d(512, 256, kernel_size=3, padding=1)
        self.dropout5 = nn.Dropout2d(p=0.5)
        self.conv2 = nn.Conv2d(256, 128, kernel_size=3, padding=1)
        self.dropout6 = nn.Dropout2d(p=0.5)
        self.conv3 = nn.Conv2d(128, 64, kernel_size=3, padding=1)
        self.dropout7 = nn.Dropout2d(p=0.5)

    def forward(self, x, skip_connections):
            x1, x2, x3 = skip_connections
            x = F.relu(self.dropout1(self.upconv1(x)))
            x = torch.cat([x, x3], axis=1)
            x = F.relu(self.dropout5(self.conv1(x)))
            x = F.relu(self.dropout2(self.upconv2(x)))
            x = torch.cat([x, x2], axis=1)
            x = F.relu(self.dropout6(self.conv2(x)))
            x = F.relu(self.dropout3(self.upconv3(x)))
            x = torch.cat([x, x1], axis=1)
            x = F.relu(self.dropout7(self.conv3(x)))
            x = self.upconv4(x)
            x = F.relu(x)  # Use ReLU activation for positive depth values
            return x

class DepthEstimationModel(nn.Module):
    def __init__(self, in_channels=3, out_channels=1):
        super(DepthEstimationModel, self).__init__()
        self.encoder = Encoder(in_channels)
        self.decoder = Decoder(out_channels)

    def forward(self, x):
        x, skip_connections = self.encoder(x)
        x = self.decoder(x, skip_connections)
        return x
